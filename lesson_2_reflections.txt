R: What happens when you initialize a repository? Why do you need to do it?
A: The folder the git init command is run in becomes the top level repo folder
and all git services are now available here. It is required to actually use git
for that particular folder or project or file or whatever.
R: How is the staging area different from the working directory and the repository?
What value do you think it offers?
A: The staging area is different from the working directory because it contains a
version of the code that might be different from the WD. It is a way to save work
but not necessarily commit this work to the repo. The SA is different from the
repo because it contains files that are actively being modified where the SA
contains a version of "the truth."
R: How can you use the staging area to make sure you have one commit per logical
change?
A: I can use git diff to compare staging to the working directory or use
git diff --staged to compare my staged commit with the HEAD. Looking at the
code differences in this way allows me to verify I am only making one logical
change per commit.
R: What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
A: Branches would be helpful if I made a logical departure in the code that was
not meant to be the main way the code would work in the future. A branch helps
because it allows me to keep all the code I already have, but give me a path to
make my non-core changes without needing to jump back and forth between commits.
R: How do the diagrams help you visualize the branch structure?
A: Diagrams are helpful to make sure one does not make changes on a detached
head and lose work. Also it is useful when merging two branches. It makes it
easier to see what changes will be merged without needing to scroll through
git log.
R: What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?
A: The result of merging branches is to combine the code from each branch into
the checked out branch. I don't know what that second question means.
R: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
A: Some merges are obvious when new lines are added at the bottom of a file and
nothing else about the file has changed. It is helpful that Git completes these
 types of changes automatically. If Git was to merge all changes automatically
 it would inevitably fuck up because Git has no way of knowing if more
 complicated changes should be made. The flip side of this is manual merges.
 This could be very time consuming and unnecessary in situations where the
 merges are straight forward. 
